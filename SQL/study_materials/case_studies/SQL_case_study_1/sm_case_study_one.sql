-- CASE STUDIES -> SQL CASE STUDY ONE
USE CASE_STUDY_ONE

-- 1) Display number of states present in location table?

SELECT

    COUNT(DISTINCT(STATE)) AS NO_OF_STATES

FROM [LOCATION]

-- 2) How many products are of regular type ?

SELECT count(*) AS NO_OF_REGULAR_PRODUCTS

FROM PRODUCT

WHERE [TYPE]='Regular'



-- 3) How much spending has been done on marketing of product id 1

SELECT SUM(Marketing) AS TOTAL_MARKETING_EXPENSE

FROM fact

WHERE ProductId=1



-- 4) What is the minimum sales of a product ?

SELECT MIN(SALES) AS MIN_SALES

FROM FACT

-- 5) Display max Cost of Good Sold(COGS).

SELECT MAX(COGS) AS MAX_COGS

FROM FACT

-- 6) Display the Details of the productid where product type is coffee

SELECT *

FROM Product

WHERE Product_Type='coffee'

-- 7) Display the details where total_expenses is greater than 40.

SELECT *

FROM fact

WHERE Total_Expenses>40

-- 8) What is the average sales in Area_Code 719 ?

SELECT AVG(SALES) AS AVG_SALES_AREA_719
FROM FACT
WHERE Area_Code=719

-- 9) Find out the total profit generated by Colorado state.

-- SELECT SUM(Profit) AS TOTAL_PROFIT_COLORADO

-- FROM fact

-- WHERE Area_Code IN (SELECT Area_Code

-- FROM [Location]

-- WHERE [State]='COLORADO')



-- use inner join



SELECT SUM(Profit) AS TOTAL_PROFIT_COLORADO

FROM fact F

    INNER JOIN [Location] L

    ON F.Area_Code=L.Area_Code

WHERE [State]='COLORADO'

-- 10) Display the average inventory for each product id.

SELECT ProductId, AVG(Inventory) AS AVG_INVENTORY

FROM fact

GROUP BY ProductId

ORDER BY ProductId

-- 11) Display state in a sequential order in a location table.

SELECT [State]
FROM [Location]
ORDER BY [State]

-- 12) Display the average budget margin where average budget margin should be greater than 100

SELECT ProductId, AVG(Budget_Margin) AS AVG_BUDGET_MARGIN_OVER_100

FROM fact

GROUP BY ProductId

HAVING AVG(Budget_Margin)>100

ORDER BY ProductId

-- 13) What is the total sales done on date 2010-01-01

SELECT SUM(SALES) "TOTAL_SALES_2010-01-01"
FROM fact
WHERE [Date]='2010-01-01'

-- 14) Display the average total expense of each product id on individual date

SELECT DATE, ProductId, AVG(Total_Expenses)

FROM fact

GROUP BY [Date], ProductId

ORDER BY DATE,ProductId

-- 15) Display the table with the following attributes such as

-- Date, productid, product_type, product, Sales, profit, state, area_code

SELECT

    Date, P.productid, P.product_type, P.product, F.Sales, F.profit, L.state, L.area_code

FROM fact F

    JOIN Product P

    ON F.ProductId=P.ProductId

    JOIN [Location] L

    ON F.Area_Code=L.Area_Code

-- 16) Display the rank without any gap to show the Sales wise rank.

SELECT *, DENSE_RANK() OVER(ORDER BY SALES)
FROM fact

-- 17) Find the State wise Profit and Sales.

SELECT L.STATE, SUM(Profit) PROFIT, SUM(Sales) SALES

FROM fact F JOIN [Location] L ON F.Area_Code=L.Area_Code

GROUP BY [State]

-- 18) Find the State wise Profit and Sales along with the Product Name. 

SELECT L.STATE, P.PRODUCT, SUM(Profit) PROFIT, SUM(Sales) SALES

FROM fact F JOIN [Location] L ON F.Area_Code=L.Area_Code

    JOIN Product P ON F.ProductId=P.ProductId

GROUP BY [State],P.PRODUCT

-- 19) If there is an increase in sales of 5%. Calculate the increased sales.

SELECT SALES, (SALES+SALES*0.05) AS INCREASED_SALES
FROM fact

-- 20) Find the maximum profit along with the Product id and Product Type.

SELECT P.ProductId, P.Product_Type, MAX(PROFIT) AS MAX_PROFIT
FROM fact F JOIN Product P ON F.ProductId=P.ProductId
GROUP BY P.ProductId, P.Product_Type

-- 21) Create a Stored Procedure to fetch the result according to the product type from Product.

CREATE PROCEDURE sp_get_producT

    @productType VARCHAR(50)

AS

SELECT *
FROM Product
WHERE Product_Type=@productType;

EXEC dbo.sp_get_producT 'Tea'

-- 22) Write a query by creating a condition in which if the total expenses is less than 60 then it is a

-- profit or else loss

SELECT TOTAL_EXPENSES, IIF(TOTAL_EXPENSES<60,'Profit','Loss') 'profit/loss'
FROM fact

-- 23) Give the total weekly sales value with the Date and productid details. Use roll-up to pull the

-- data in hierarchical order

SELECT [DATE], ProductId, SUM(Sales) AS TOTAL_WEEKLY_SALES
FROM fact
GROUP BY [DATE],ProductId WITH ROLLUP

-- 24) Apply union and intersection operator on the tables which consist of attribute area code.

    SELECT Area_Code
    FROM FACT

UNION

    SELECT Area_Code
    FROM [Location]

    SELECT Area_Code
    FROM FACT

INTERSECT

    SELECT Area_Code
    FROM [Location]

-- 25) Create a user-defined function for the product table to fetch a particular product type based

-- upon the userâ€™s preference

CREATE FUNCTION udf_get_product(@prodType VARCHAR(50))

RETURNS TABLE

AS

RETURN(

SELECT *

FROM Product

WHERE Product_Type=@prodType

)

SELECT *
FROM dbo.udf_get_product('Tea')

-- 26) Change the product type from coffee to tea where product id is 1 and undo it.

BEGIN TRAN T1;
-- START

UPDATE PRODUCT

SET Product_Type='coffee'

FROM Product WHERE ProductId=1

ROLLBACK TRAN T1;
-- END

-- 27) Display the Date, productid and sales where total expenses are between 100 to 200.

SELECT [DATE], ProductId, Sales

FROM fact

WHERE Total_Expenses BETWEEN 100 AND 200

-- 28) Delete the records in the product table for regular type.

CREATE TABLE #tempProduct
(
    productid int,
    [Type] VARCHAR(50)
);

INSERT INTO #tempProduct

SELECT ProductId, [Type]
from Product

DELETE FROM #tempProduct

WHERE [Type]='Regular'

-- 29) Display the ASCII value of the fifth character from the column product

SELECT SUBSTRING(Product,5,1) [CHAR] , ASCII(SUBSTRING(Product,5,1)) [ASCII]
FROM Product