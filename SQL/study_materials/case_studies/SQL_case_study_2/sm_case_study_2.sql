-- CREATE DATABASE CASESTUDY2

-- CREATE TABLE LOCATION
-- (
--     LOCATION_ID INT,
--     CITY VARCHAR(10)
-- )

-- INSERT INTO LOCATION
-- VALUES(122, 'New York'),
--     (123, 'Dallas'),
--     (124, 'Chicago'),
--     (167, 'Boston')

-- SELECT *
-- FROM LOCATION

-- CREATE TABLE DEPARTMENT
-- (
--     DEPARTMENT_ID INT,
--     NAME VARCHAR(20),
--     LOCATION_ID INT
-- )

-- INSERT INTO DEPARTMENT
-- VALUES(10, 'Accounting', 122),
--     (20, 'Sales', 124),
--     (30, 'Research', 123),
--     (40, 'Operations', 167)

-- SELECT *
-- FROM DEPARTMENT;

-- CREATE TABLE JOB
-- (
--     JOB_ID INT,
--     DESIGNATION VARCHAR(20)
-- )

-- INSERT INTO JOB
-- VALUES
--     (667, 'Clerk'),
--     (668, 'Staff'),
--     (669, 'Analyst'),
--     (670, 'Sales Person'),
--     (671, 'Manager'),
--     (672, 'President')

-- SELECT *
-- FROM JOB;

-- CREATE TABLE EMPLOYEE
-- (
--     Employee_ID INT,
--     Last_Name VARCHAR(20),
--     First_Name VARCHAR(20),
--     Middle_Name VARCHAR(20),
--     Job_ID INT,
--     Manager_ID INT,
--     Hire_Date DATE,
--     Salary MONEY,
--     Comm INT,
--     Department_ID INT
-- )

-- INSERT INTO EMPLOYEE
-- VALUES
--     (7369, 'SMITH', 'JOHN', 'Q', 667, 7902, '17-DEC-84', 800, NULL, 20),
--     (7499, 'ALLEN', 'KEVIN', 'J', 670, 7698, '20-FEB-85', 1600, 300, 30),
--     (7505, 'DOYLE', 'JEAN', 'K', 671, 7839, '04-APR-85', 2850, NULL, 30),
--     (7506, 'DENNIS', 'LYNN', 'S', 671, 7839, '15-MAY-85', 2750, NULL, 30),
--     (7507, 'BAKER', 'LESLIE', 'D', 671, 7839, '10-JUN-85', 2200, NULL, 40),
--     (7521, 'WARK', 'CYNTHIA', 'D', 670, 7698, '22-FEB-85', 1250, 500, 30)

/*
## Simple Queries
*/

-- 1. LIST ALL THE EMPLOYEE DETAILS.
SELECT *
FROM EMPLOYEE

-- 2. LIST ALL THE DEPARTMENT DETAILS
SELECT *
FROM DEPARTMENT

-- 3. LIST ALL JOB DETAILS.
SELECT *
FROM JOB

-- 4. LIST ALL THE LOCATIONS.
SELECT *
FROM LOCATION

-- 5. LIST OUT THE FIRSTNAME, LASTNAME, SALARY, COMMISSION FOR ALL EMPLOYEES.
SELECT FIRST_NAME, LAST_NAME, SALARY, COMM
FROM EMPLOYEE

-- 6. LIST OUT EMPLOYEEID,LAST NAME, DEPARTMENT ID FOR ALL EMPLOYEES AND ALIAS
-- EMPLOYEEID AS "ID OF THE EMPLOYEE", LAST NAME AS "NAME OF THE EMPLOYEE",
-- DEPARTMENTID AS "DEP_ID".

SELECT Employee_ID AS "ID OF THE EMPLOYEE", LAST_NAME "NAME OF THE EMPLOYEE", DEPARTMENT_ID "DEP_ID"
FROM EMPLOYEE

-- 7. LIST OUT THE EMPLOYEES ANNUAL SALARY WITH THEIR NAMES ONLY.
SELECT FIRST_NAME, SALARY*12 AS "ANNUAL SALARY"
FROM EMPLOYEE

/*
## WHERE
*/

-- 1. LIST THE DETAILS ABOUT "SMITH"
SELECT *
FROM EMPLOYEE
WHERE 'SMITH' in (First_Name,Last_Name)

-- 2. LIST OUT THE EMPLOYEES WHO ARE WORKING IN DEPARTMENT 20.
SELECT *
FROM EMPLOYEE
WHERE Department_ID=20

-- 3. LIST OUT THE EMPLOYEES WHO ARE EARNING SALARY BETWEEN 3000 AND 4500.
SELECT *
FROM EMPLOYEE
WHERE Salary BETWEEN 3000 AND 4500

-- 4. LIST OUT THE EMPLOYEES WHO ARE WORKING IN DEPARTMENT 10 OR 20.
SELECT *
FROM EMPLOYEE
WHERE Department_ID IN (10,20)

-- 5. FIND OUT THE EMPLOYEES WHO ARE NOT WORKING IN DEPARTMENT 10 OR 30.
SELECT *
FROM EMPLOYEE
WHERE Department_ID NOT IN (10,30)

-- 6. LIST OUT THE EMPLOYEES WHOSE NAME STARTS WITH 'S'.
SELECT *
FROM EMPLOYEE
WHERE First_Name LIKE 'S%' OR Last_Name LIKE 'S%'

-- 7. LIST OUT THE EMPLOYEES WHOSE NAME STARTS WITH 'S' AND ENDS WITH 'H'.
SELECT *
FROM EMPLOYEE
WHERE (First_Name LIKE 'S%H' OR Last_Name LIKE 'S%H')

-- 8. LIST OUT THE EMPLOYEES WHOSE NAME LENGTH IS 4 AND START WITH 'S'.
SELECT *
FROM EMPLOYEE
WHERE 4 IN (LEN(First_Name),LEN(LAST_NAME)) AND (First_Name LIKE 'S%' OR Last_Name LIKE 'S%')

-- 9. LIST OUT EMPLOYEES WHO ARE WORKING IN DEPARRTMENT 10 AND DRAW THE
-- SALARIES MORE THAN 3500.

SELECT *
FROM EMPLOYEE
WHERE Department_ID=10 AND Salary>3500

-- 10. LIST OUT THE EMPLOYEES WHO ARE NOT RECEVING COMMISSION.
SELECT *
FROM EMPLOYEE
WHERE COMM IS NULL

/*
## ORDER BY CLAUSE
*/

-- 1. LIST OUT THE EMPLOYEE ID, LAST NAME IN ASCENDING ORDER BASED ON THE EMPLOYEE ID.
SELECT Employee_ID, LAST_NAME
FROM EMPLOYEE
ORDER BY Employee_ID

-- 2. LIST OUT THE EMPLOYEE ID, NAME IN DESCENDING ORDER BASED ON SALARY.
SELECT Employee_ID, First_Name AS [NAME]
FROM EMPLOYEE
ORDER BY Salary DESC

-- 3. LIST OUT THE EMPLOYEE DETAILS ACCORDING TO THEIR LAST-NAME IN ASCENDING ORDER
SELECT *
FROM EMPLOYEE
ORDER BY Last_Name

-- 4. LIST OUT THE EMPLOYEE DETAILS ACCORDING TO THEIR LAST-NAME IN ASCENDING ORDER AND
-- THEN ON DEPARTMENT_ID IN DESCENDING ORDER.
SELECT *
FROM EMPLOYEE
ORDER BY Last_Name, Department_ID DESC


/*
## GROUP BY & HAVING CLAUSE
hint keywords - wise

*/

-- 1. HOW MANY EMPLOYEES WHO ARE IN DIFFERENT DEPARTMENTS WISE IN THE ORGANIZATION.
SELECT Department_ID, COUNT(*) AS EMP_COUNT
FROM EMPLOYEE
GROUP BY Department_ID

-- 2. LIST OUT THE DEPARTMENT WISE MAXIMUM SALARY, MINIMUM SALARY, AVERAGE SALARY OF
-- THE EMPLOYEES.
SELECT Department_ID, MAX(Salary) AS MAX_SAL, MIN(Salary) AS MIN_SAL, AVG(Salary) AS AVG_SAL
FROM EMPLOYEE
GROUP BY Department_ID

-- 3. LIST OUT JOB WISE MAXIMUM SALARY, MINIMUM SALARY, AVERAGE SALARIES OF THE
-- EMPLOYEES.
SELECT Job_ID, MAX(Salary) AS MAX_SAL, MIN(Salary) AS MIN_SAL, AVG(Salary) AS AVG_SAL
FROM EMPLOYEE
GROUP BY Job_ID

-- 4. LIST OUT THE NUMBER OF EMPLOYEES JOINED IN EVERY MONTH IN ASCENDING ORDER.
SELECT DATENAME(MM,Hire_Date) AS JOINING_MONTH, COUNT(*) AS NO_OF_EMPLOYEE
FROM EMPLOYEE
GROUP BY DATENAME(MM,Hire_Date)
ORDER BY DATENAME(MM,Hire_Date)

-- 5. LIST OUT THE NUMBER OF EMPLOYEES FOR EACH MONTH AND YEAR, IN THE ASCENDING
-- ORDER BASED ON THE YEAR, MONTH.
SELECT MONTH(Hire_Date) AS [MONTH], YEAR(Hire_Date) AS [YEAR], COUNT(*) AS EMP_COUNT
FROM EMPLOYEE
GROUP BY MONTH(Hire_Date),YEAR(Hire_Date)
ORDER BY MONTH(Hire_Date),YEAR(Hire_Date)

-- 6. LIST OUT THE DEPARTMENT ID HAVING ATLEAST FOUR EMPLOYEES.
SELECT Department_ID, COUNT(*) AS NO_OF_EMP
FROM EMPLOYEE
GROUP BY Department_ID
HAVING COUNT(*) >=4

-- 7. HOW MANY EMPLOYEES JOINED IN JANUARY MONTH.
SELECT COUNT(*) AS EMP_JOINED_IN_JAN
FROM EMPLOYEE
WHERE DATENAME(MM,Hire_Date)='Jan'

-- 8. HOW MANY EMPLOYEES JOINED IN JANUARY OR SEPTEMBER MONTH.
SELECT COUNT(*) AS EMP_JOINED_IN_JAN
FROM EMPLOYEE
WHERE MONTH(Hire_Date) IN (1,9)


-- 9. HOW MANY EMPLOYEES WERE JOINED IN 1985?
SELECT YEAR(Hire_Date), COUNT(*) AS EMP_JOINED_IN_1985
FROM EMPLOYEE
WHERE YEAR(Hire_Date)=1985


-- 10. HOW MANY EMPLOYEES WERE JOINED EACH MONTH IN 1985.

SELECT DATENAME(MM,Hire_Date) AS [MONTH], COUNT(*) AS EMP_JOINED_IN_1985
FROM EMPLOYEE
GROUP BY YEAR(Hire_Date), DATENAME(MM,Hire_Date)
HAVING YEAR(Hire_Date)=1985

-- 11. HOW MANY EMPLOYEES WERE JOINED IN MARCH 1985?
SELECT DATENAME(MM,Hire_Date) AS [MONTH], COUNT(*) AS EMP_JOINED_IN_1985
FROM EMPLOYEE
GROUP BY YEAR(Hire_Date), DATENAME(MM,Hire_Date)
HAVING YEAR(Hire_Date)=1985 AND DATENAME(MM,Hire_Date)='MAR'

-- 12. WHICH IS THE DEPARTMENT ID, HAVING GREATER THAN OR EQUAL TO 3 EMPLOYEES JOINED IN
-- APRIL 1985?
SELECT Department_ID, COUNT(*) AS EMP_COUNT
FROM EMPLOYEE
GROUP BY Department_ID,YEAR(Hire_Date), MONTH(Hire_Date)
HAVING YEAR(Hire_Date)=1985 AND MONTH(Hire_Date)=4 AND COUNT(*)>=3

/*
## JOINS
*/

-- 1. LIST OUT EMPLOYEES WITH THEIR DEPARTMENT NAMES.

SELECT E.First_Name, D.NAME
FROM EMPLOYEE E LEFT JOIN DEPARTMENT D ON E.Department_ID=D.DEPARTMENT_ID



-- 2. DISPLAY EMPLOYEES WITH THEIR DESIGNATIONS.

SELECT E.First_Name, J.DESIGNATION
FROM EMPLOYEE E LEFT JOIN JOB J ON E.Job_ID=J.JOB_ID

-- 3. DISPLAY THE EMPLOYEES WITH THEIR DEPARTMENT NAMES AND REGIONAL GROUPS.

SELECT E.First_Name, D.NAME AS DEPARTMENT_NAME, L.CITY
FROM EMPLOYEE E LEFT JOIN DEPARTMENT D ON E.Department_ID=D.DEPARTMENT_ID LEFT JOIN [LOCATION] L ON D.LOCATION_ID=L.LOCATION_ID

-- 4. HOW MANY EMPLOYEES WHO ARE WORKING IN DIFFERENT DEPARTMENTS AND DISPLAY WITH DEPARTMENT NAMES.

SELECT D.NAME, COUNT(*) AS NO_OF_EMPLOYEES

FROM EMPLOYEE E LEFT JOIN DEPARTMENT D ON E.DEPARTMENT_ID=D.DEPARTMENT_ID

GROUP BY D.NAME

-- 5. HOW MANY EMPLOYEES WHO ARE WORKING IN SALES DEPARTMENT.

SELECT COUNT(*)
FROM EMPLOYEE E LEFT JOIN DEPARTMENT D ON E.Department_ID=D.DEPARTMENT_ID
WHERE D.NAME='SALES'

-- 6. WHICH IS THE DEPARTMENT HAVING GREATER THAN OR EQUAL TO 5

-- EMPLOYEES AND DISPLAY THE DEPARTMENT NAMES IN ASCENDING ORDER.

SELECT D.NAME, COUNT(*) AS NO_OF_EMPLOYEES

FROM EMPLOYEE E LEFT JOIN DEPARTMENT D ON E.DEPARTMENT_ID=D.DEPARTMENT_ID

GROUP BY D.NAME

HAVING COUNT(*)>=5

ORDER BY D.NAME

-- 7. HOW MANY JOBS IN THE ORGANIZATION WITH DESIGNATIONS.

SELECT COUNT(*) AS NO_OF_JOBS
FROM EMPLOYEE E LEFT JOIN JOB J ON E.Job_ID=J.JOB_ID

-- 8. HOW MANY EMPLOYEES ARE WORKING IN "NEW YORK".

SELECT COUNT(*)

FROM EMPLOYEE E

    LEFT JOIN DEPARTMENT D ON E.Department_ID=D.DEPARTMENT_ID

    LEFT JOIN [LOCATION] L ON D.LOCATION_ID= L.LOCATION_ID

WHERE L.CITY='NEW YORK'

-- 9. DISPLAY THE EMPLOYEE DETAILS WITH SALARY GRADES.



-- 10. LIST OUT THE NO. OF EMPLOYEES ON GRADE WISE.

-- 11. DISPLAY THE EMPLOYEE SALARY GRADES AND NO. OF EMPLOYEES BETWEEN 2000 TO

-- 5000 RANGE OF SALARY.



SELECT *
FROM EMPLOYEE
WHERE Salary BETWEEN 2000 AND 5000

-- 12. DISPLAY THE EMPLOYEE DETAILS WITH THEIR MANAGER NAMES.





-- 13. DISPLAY THE EMPLOYEE DETAILS WHO EARN MORE THAN THEIR MANAGERS SALARIES.



-- 14. SHOW THE NO. OF EMPLOYEES WORKING UNDER EVERY MANAGER.

SELECT Manager_ID, COUNT(*) AS NO_OF_EMPLOYEES
FROM EMPLOYEE
GROUP BY Manager_ID

-- 15. DISPLAY EMPLOYEE DETAILS WITH THEIR MANAGER NAMES.

-- SAME AS Q.12



-- 16. DISPLAY ALL EMPLOYEES IN SALES OR OPERATION DEPARTMENTS

SELECT *

FROM EMPLOYEE E LEFT JOIN DEPARTMENT D ON E.Department_ID=D.DEPARTMENT_ID

WHERE D.NAME IN ('SALES','OPERATIONS')

/*
#Â SET OPERATORS
*/

-- 1. LIST OUT THE DISTINCT JOBS IN SALES AND ACCOUNTING DEPARTMENTS.

SELECT distinct *

FROM EMPLOYEE E LEFT JOIN DEPARTMENT D ON E.Department_ID=D.DEPARTMENT_ID LEFT JOIN JOB J ON E.Job_ID=J.JOB_ID

WHERE D.NAME IN ('SALES','ACCOUNTING')

-- 2. LIST OUT ALL THE JOBS IN SALES AND ACCOUNTING DEPARTMENTS.

SELECT *

FROM EMPLOYEE E LEFT JOIN DEPARTMENT D ON E.Department_ID=D.DEPARTMENT_ID

WHERE D.NAME IN ('SALES','ACCOUNTING')

-- 3. LIST OUT THE COMMON JOBS IN RESEARCH AND ACCOUNTING DEPARTMENTS IN 

--  ASCENDING ORDER

SELECT *

FROM EMPLOYEE E LEFT JOIN DEPARTMENT D ON E.Department_ID = D.DEPARTMENT_ID

WHERE D.NAME='RESEARCH' AND D.NAME='ACCOUNTING'

/*
#Â SUB QUERIES
*/

-- 1. DISPLAY THE EMPLOYEES LIST WHO GOT THE MAXIMUM SALARY.

SELECT *

FROM EMPLOYEE

WHERE Salary = (SELECT MAX(Salary)

FROM EMPLOYEE)

-- 2. DISPLAY THE EMPLOYEES WHO ARE WORKING IN SALES DEPARTMENT.

SELECT *

FROM EMPLOYEE E LEFT JOIN DEPARTMENT D ON E.Department_ID=D.DEPARTMENT_ID

WHERE D.NAME='SALES'

-- 3. DISPLAY THE EMPLOYEES WHO ARE WORKING AS 'CLERCK'.

SELECT *

FROM EMPLOYEE E JOIN JOB J ON E.Job_ID=J.JOB_ID

WHERE DESIGNATION='CLERK'

-- 4. DISPLAY THE LIST OF EMPLOYEES WHO ARE LIVING IN "NEW YORK".

SELECT *

FROM EMPLOYEE E

    LEFT JOIN DEPARTMENT D ON E.Department_ID=D.DEPARTMENT_ID

    LEFT JOIN [LOCATION] L ON D.LOCATION_ID=L.LOCATION_ID

WHERE CITY='NEW YORK'

-- 5. FIND OUT NO. OF EMPLOYEES WORKING IN "SALES" DEPARTMENT.

SELECT COUNT(*) AS NO_OF_EMPLOYEES_IN_SALES

FROM EMPLOYEE E JOIN DEPARTMENT D ON E.Department_ID=D.DEPARTMENT_ID

WHERE D.NAME='SALES'

-- 6. UPDATE THE EMPLOYEES SALARIES, WHO ARE WORKING AS CLERK ON THE BASIS OF 10%.

UPDATE EMPLOYEE

SET Salary=(Salary+Salary*0.10)

FROM EMPLOYEE E

    JOIN JOB J ON E.Job_ID=J.JOB_ID

WHERE DESIGNATION='CLERK'

-- 7. DELETE THE EMPLOYEES WHO ARE WORKING IN ACCOUNTING DEPARTMENT.

DELETE EMPLOYEE FROM EMPLOYEE E

    JOIN DEPARTMENT D

    ON E.Department_ID=D.DEPARTMENT_ID

WHERE D.NAME='ACCOUNTING'

-- 8. DISPLAY THE SECOND HIGHEST SALARY DRAWING EMPLOYEE DETAILS.

-- SELECT *

-- FROM EMPLOYEE

-- ORDER BY Salary DESC OFFSET 1 ROWS FETCH NEXT 1 ROWS ONLY

SELECT *

FROM (SELECT *, DENSE_RANK()OVER(ORDER BY SALARY DESC) AS RANK

    FROM EMPLOYEE) A

WHERE RANK=2

-- 9. DISPLAY THE N'TH HIGHEST SALARY DRAWING EMPLOYEE DETAILS.

SELECT TOP 1
    *
FROM EMPLOYEE
ORDER BY Salary

-- 10. LIST OUT THE EMPLOYEES WHO EARN MORE THAN EVERY EMPLOYEE IN DEPARTMENT 30.

SELECT TOP 1
    *
FROM EMPLOYEE E
WHERE Department_ID=30
ORDER BY Salary DESC

-- 11. LIST OUT THE EMPLOYEES WHO EARN MORE THAN THE LOWEST SALARY IN DEPARTMENT 30.

SELECT *

FROM EMPLOYEE

WHERE Department_ID=30 AND Salary> (SELECT MIN(Salary)

    FROM EMPLOYEE

    WHERE Department_ID=30)

-- 12. FIND OUT WHOSE DEPARTMENT HAS NOT EMPLOYEES.

SELECT D.NAME

FROM DEPARTMENT D LEFT JOIN EMPLOYEE E ON D.Department_ID=E.DEPARTMENT_ID

WHERE Employee_ID IS NULL

-- 13. FIND OUT WHICH DEPARTMENT DOES NOT HAVE ANY EMPLOYEES.

-- SAME AS Q.12

-- 14. FIND OUT THE EMPLOYEES WHO EARN GREATER THAN THE AVERAGE SALARY FOR THEIR 

-- DEPARTMENT



WITH

    CTE

    AS



    (

        SELECT Department_ID, AVG(Salary) AS AVG_SAL

        FROM EMPLOYEE

        GROUP BY Department_ID

    )



SELECT *

FROM EMPLOYEE E LEFT JOIN CTE C ON E.Department_ID=C.Department_ID

WHERE Salary>C.AVG_SAL